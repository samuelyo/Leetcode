package com.leetcode.MinimizeMalwareSpread;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class MinimizeMalwareSpread {
    public static void main(String[] args) {

    }

    private static int spread(int[][] graph, Set<Integer> infected) {
        Set<Integer> bad = new HashSet<>(infected);
        Queue<Integer> bfs = new LinkedList<>();
        for (Integer initialInfected : infected) {
            bfs.add(initialInfected);
        }
        while (!bfs.isEmpty()) {
            Integer next = bfs.remove();
            for (int j = 0; j < graph[next].length; ++j) {
                if (graph[next][j] == 1 && !bad.contains(j)) {
                    bad.add(j);
                    bfs.add(j);
                }
            }
        }
        //return how many total were infected after spreading
        return bad.size();
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> infected = new HashSet<>();
        for (int initialInfected : initial) {
            infected.add(initialInfected);
        }
        int min = Integer.MAX_VALUE;
        int ans = 0;
        for (int ignore = 0; ignore < initial.length; ++ignore) {
            int ignoreNumb = initial[ignore];
            infected.remove(ignoreNumb);
            int amount = spread(graph, infected);
            if (amount < min || (amount == min && initial[ignore] < ans)) {
                ans = initial[ignore];
                min = amount;
            }
            infected.add(ignoreNumb);
        }
        return ans;
    }
}
