package com.leetcode.MinimizeMalwareSpreadII;

import java.util.*;

public class MinimizeMalwareSpreadII {
    public static void main(String[] args) {

    }

    static int[] parent;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        parent = new int[N];
        Arrays.fill(parent, -1);
        Arrays.sort(initial);   // sort the initial list to get the min index of result in case of a tie
        Set<Integer> set = new HashSet<>();
        for (int n : initial) set.add(n);

        // build the union find set disabling the init elements
        for (int i = 0; i < N; i++) {
            if (set.contains(i)) continue;
            for (int j = 0; j < N; j++) {
                if (set.contains(j)) continue;
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }

        int total = Integer.MAX_VALUE;
        int res = -1;
        for (int skip = 0; skip < initial.length; skip++) {
            Map<Integer, Integer> cnts = new HashMap<>();
            for (int mal = 0; mal < initial.length; mal++) {
                if (mal == skip) continue;

                int malId = initial[mal];
                for (int i = 0; i < N; i++) {
                    if (i == initial[skip]) continue;

                    if (graph[malId][i] == 1) {
                        int root = find(i);
                        cnts.putIfAbsent(root, -parent[root]);
                    }

                }

            }

            int sum = 0;
            for (int v : cnts.values()) {
                sum += v;
            }

            // if removing initial[skip] causes less spread
            if (sum < total) {
                total = sum;
                res = initial[skip];

            }
        }

        return res;
    }

    private static int find(int x) {
        if (parent[x] < 0) return x;
        parent[x] = find(parent[x]);
        return parent[x];
    }

    private static void union(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) return;
        if (parent[x] <= parent[y]) {
            parent[x] += parent[y];
            parent[y] = x;
        } else {
            parent[y] += parent[x];
            parent[x] = y;
        }
    }

}
